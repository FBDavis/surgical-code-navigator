-- Create friend groups and gamification tables
CREATE TABLE public.friend_groups (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  created_by UUID NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  is_public BOOLEAN DEFAULT false,
  group_code TEXT UNIQUE DEFAULT substring(md5(random()::text) from 1 for 8)
);

CREATE TABLE public.friend_group_members (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  group_id UUID NOT NULL REFERENCES public.friend_groups(id) ON DELETE CASCADE,
  user_id UUID NOT NULL,
  joined_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  role TEXT DEFAULT 'member' CHECK (role IN ('admin', 'member')),
  UNIQUE(group_id, user_id)
);

-- Achievement/Badge system
CREATE TABLE public.achievement_types (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  icon TEXT,
  category TEXT,
  rarity TEXT DEFAULT 'common' CHECK (rarity IN ('common', 'rare', 'epic', 'legendary')),
  criteria JSONB, -- Flexible criteria for earning the badge
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

CREATE TABLE public.user_achievements (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  achievement_type_id UUID NOT NULL REFERENCES public.achievement_types(id),
  earned_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  metadata JSONB, -- Additional data like case count, specific details
  week_earned TEXT, -- Format: "2025-W03" for tracking weekly awards
  ai_generated BOOLEAN DEFAULT false,
  UNIQUE(user_id, achievement_type_id, week_earned)
);

-- Weekly AI assessments
CREATE TABLE public.weekly_assessments (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  week_start DATE NOT NULL,
  week_end DATE NOT NULL,
  assessment_data JSONB NOT NULL, -- Cases, RVUs, specialties, etc.
  ai_insights TEXT,
  funny_awards JSONB, -- Array of funny awards generated by AI
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  UNIQUE(user_id, week_start)
);

-- Leaderboards (weekly/monthly stats)
CREATE TABLE public.leaderboard_entries (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  period_type TEXT NOT NULL CHECK (period_type IN ('weekly', 'monthly', 'all_time')),
  period_start DATE NOT NULL,
  period_end DATE NOT NULL,
  total_rvu NUMERIC DEFAULT 0,
  total_cases INTEGER DEFAULT 0,
  rank_position INTEGER,
  specialty_breakdown JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  UNIQUE(user_id, period_type, period_start)
);

-- Friend discovery through contacts (HIPAA-safe)
CREATE TABLE public.contact_discoveries (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL,
  discovered_user_id UUID NOT NULL,
  discovery_method TEXT DEFAULT 'contact_match', -- contact_match, institution_match, etc.
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  UNIQUE(user_id, discovered_user_id)
);

-- Enable RLS
ALTER TABLE public.friend_groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.friend_group_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.achievement_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.weekly_assessments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leaderboard_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contact_discoveries ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can create friend groups" ON public.friend_groups
  FOR INSERT WITH CHECK (auth.uid() = created_by);

CREATE POLICY "Users can view groups they're in or public groups" ON public.friend_groups
  FOR SELECT USING (
    is_public = true OR 
    created_by = auth.uid() OR 
    id IN (SELECT group_id FROM public.friend_group_members WHERE user_id = auth.uid())
  );

CREATE POLICY "Group creators can update their groups" ON public.friend_groups
  FOR UPDATE USING (auth.uid() = created_by);

CREATE POLICY "Users can view group members in their groups" ON public.friend_group_members
  FOR SELECT USING (
    group_id IN (
      SELECT id FROM public.friend_groups 
      WHERE created_by = auth.uid() OR is_public = true OR
      id IN (SELECT group_id FROM public.friend_group_members WHERE user_id = auth.uid())
    )
  );

CREATE POLICY "Users can join groups" ON public.friend_group_members
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Group admins can manage members" ON public.friend_group_members
  FOR ALL USING (
    group_id IN (
      SELECT group_id FROM public.friend_group_members 
      WHERE user_id = auth.uid() AND role = 'admin'
    ) OR
    group_id IN (
      SELECT id FROM public.friend_groups WHERE created_by = auth.uid()
    )
  );

CREATE POLICY "Achievement types are viewable by everyone" ON public.achievement_types
  FOR SELECT USING (true);

CREATE POLICY "Users can view all achievements" ON public.user_achievements
  FOR SELECT USING (true);

CREATE POLICY "System can create achievements" ON public.user_achievements
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Users can view their assessments" ON public.weekly_assessments
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "System can create assessments" ON public.weekly_assessments
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Leaderboards are viewable by everyone" ON public.leaderboard_entries
  FOR SELECT USING (true);

CREATE POLICY "System can manage leaderboards" ON public.leaderboard_entries
  FOR ALL USING (true);

CREATE POLICY "Users can view contact discoveries" ON public.contact_discoveries
  FOR SELECT USING (auth.uid() = user_id OR auth.uid() = discovered_user_id);

CREATE POLICY "Users can create contact discoveries" ON public.contact_discoveries
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Insert some funny achievement types
INSERT INTO public.achievement_types (name, description, icon, category, rarity, criteria) VALUES
('Foot King', 'Completed 25+ foot and ankle procedures', 'üëë', 'specialty', 'rare', '{"specialty": "foot_ankle", "min_cases": 25}'),
('Making Big People Little', 'Performed 10+ bariatric procedures', '‚öñÔ∏è', 'specialty', 'epic', '{"procedure_type": "bariatric", "min_cases": 10}'),
('Gallbladder Collector', 'Performed 10+ cholecystectomies', 'ü™£', 'procedure', 'common', '{"cpt_codes": ["47562", "47563", "47564"], "min_cases": 10}'),
('Joint Master', 'Completed 15+ joint replacement surgeries', 'ü¶¥', 'specialty', 'rare', '{"procedure_type": "joint_replacement", "min_cases": 15}'),
('Spine Warrior', 'Performed 20+ spine procedures', 'üè¥‚Äç‚ò†Ô∏è', 'specialty', 'epic', '{"specialty": "spine", "min_cases": 20}'),
('Heart Whisperer', 'Completed 10+ cardiac procedures', '‚ù§Ô∏è', 'specialty', 'legendary', '{"specialty": "cardiac", "min_cases": 10}'),
('RVU Machine', 'Generated 1000+ RVUs in a week', 'üöÄ', 'performance', 'epic', '{"weekly_rvu": 1000}'),
('Case Crusher', 'Completed 50+ cases in a week', 'üí™', 'volume', 'rare', '{"weekly_cases": 50}'),
('Night Owl', 'Performed 5+ emergency cases after midnight', 'ü¶â', 'timing', 'rare', '{"emergency_night_cases": 5}'),
('Speed Demon', 'Completed cases with exceptional efficiency', '‚ö°', 'efficiency', 'epic', '{"efficiency_score": 90}');

-- Create trigger for updating timestamps
CREATE TRIGGER update_friend_groups_updated_at
  BEFORE UPDATE ON public.friend_groups
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_leaderboard_entries_updated_at
  BEFORE UPDATE ON public.leaderboard_entries
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();